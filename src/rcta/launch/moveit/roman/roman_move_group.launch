<launch>
    <arg name="sim" default="false"/>

    <!-- move_group parameters -->
    <arg name="allow_trajectory_execution"          default="true"/>
    <arg name="max_safe_path_cost"                  default="1"/>
    <arg name="jiggle_fraction"                     default="0.05"/>
    <arg name="publish_monitored_planning_scene"    default="true"/>

    <arg name="fake_execution"                      value="$(arg sim)"/>

    <!-- Load the URDF, SRDF and other .yaml configuration files on the -->
    <!-- param server -->
    <include file="$(find rcta)/launch/moveit/roman/planning_context.launch">
        <arg name="load_robot_description" value="true"/>
    </include>

    <!-- We do not have a robot connected, so publish fake joint states -->
    <node if="$(arg sim)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- broadcast static tf for virtual joint between world and robot -->
    <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0"
            args="0 0 0 0 0 0 odom_combined base_link 100"/>

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find rcta)/config/moveit/roman/planning_pipeline.launch.xml">
        <arg name="pipeline" value="sbpl"/>
    </include>

    <!-- Trajectory Execution Functionality -->
    <include if="$(arg allow_trajectory_execution)" ns="move_group" file="$(find rcta)/config/moveit/roman/trajectory_execution.launch.xml">
        <arg name="fake_execution" value="$(arg fake_execution)"/>
    </include>

    <!-- Sensors Functionality -->
    <include ns="move_group" file="$(find rcta)/config/moveit/roman/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
        <arg name="moveit_sensor_manager" value="rcta_roman"/>
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" pkg="moveit_ros_move_group" type="move_group">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>

        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)"/>

        <!-- MoveGroup capabilities to load -->
        <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				            move_group/MoveGroupExecuteService
				            move_group/MoveGroupKinematicsService
				            move_group/MoveGroupMoveAction
				            move_group/MoveGroupPickPlaceAction
				            move_group/MoveGroupPlanService
				            move_group/MoveGroupQueryPlannersService
				            move_group/MoveGroupStateValidationService
				            move_group/MoveGroupGetPlanningSceneService
				            move_group/ClearOctomapService
				            "/>

        <!-- Publish the planning scene of the physical robot so that rviz -->
        <!-- plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
    </node>
</launch>
